# This workflow will build and push serverless application
# when there is a push to the $default-branch branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create a GitHub account and a repository.
# 2. Create a AWS Free-tier account.
# 3. Create lambda function in the code of your choice.
# 4. Create a s3 bucket in the same region
# 5. Create an IAM User and Access Key with Permission policies to:
#    IAMFullAccess
#    AmazonS3FullAccess
#    AmazonAPIGatewayInvokeFullAccess
#    CloudWatchFullAccess
#    AmazonAPIGatewayAdministrator
#    AWSCloudFormationFullAccess
#    AWSLambdaFullAccess
# 6. Generate Access Keys
# 7. Create a GitHub action workflow to deploy our lambda to AWS Cloud
#    Create a file '<deploy>.yml' below the folder .github/workflows folder.
# 8. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.
#

name: Deploy main branch to Amazon Lambda
'on':
  push:
    branches:
      - main
env:
  AWS_REGION: ap-southeast-2
  SAM_TEMPLATE: ./src/NET8Native/template.yaml
jobs:
  build-deploy-serverless:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Setup .NET core sdk
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            6.0.x
            8.0.x
      - name: Setup SAM (Serverless Application Model)
        uses: aws-actions/setup-sam@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: '${{ env.AWS_REGION }}'
      - run: sam build --template ${SAM_TEMPLATE} --use-container
      - run: >-
          sam deploy --no-confirm-changeset --no-fail-on-empty-changeset
          --stack-name sam-ashulearn-lambda --s3-bucket vstiara-hosted-content
          --capabilities CAPABILITY_IAM --region ${{ env.AWS_REGION }}